import pygame
import random
import sys

# Initialize Pygame
pygame.init()

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

# Screen settings
WIDTH, HEIGHT = 500, 500
GRID_SIZE = 5
GRID_WIDTH = WIDTH // GRID_SIZE
GRID_HEIGHT = HEIGHT // GRID_SIZE

# Fonts
font = pygame.font.Font(None, 36)

class NumberFillGame:
    def __init__(self):
        self.current_number = 2
        self.level = 1
        self.paused = False
        self.game_state = "playing"

        self.inner_board = [[0 for _ in range(GRID_SIZE)] for _ in range(GRID_SIZE)]
        self.outer_board = [[0 for _ in range(GRID_SIZE + 2)] for _ in range(GRID_SIZE + 2)]

        self.screen = pygame.display.set_mode((WIDTH, HEIGHT))
        self.update_display()

        self.generate_board_with_random_1()

    def generate_board_with_random_1(self):
        if self.game_state == "playing" and self.level == 1:
            random_row, random_col = random.randint(0, GRID_SIZE - 1), random.randint(0, GRID_SIZE - 1)
            if self.inner_board[random_row][random_col] == 0:
                self.inner_board[random_row][random_col] = 1

    def on_button_click(self, row, col):
        if self.game_state == "playing":
            if self.level == 1:
                if 0 <= row < GRID_SIZE and 0 <= col < GRID_SIZE:
                    if self.inner_board[row][col] == 0 and self.is_valid_move(row, col, self.current_number):
                        self.inner_board[row][col] = self.current_number
                        self.current_number += 1
                        self.update_display()

                        if self.current_number == 26:
                            self.show_congratulatory_message()
                            self.level = 2
                            self.current_number = 2
                            self.generate_level_2_board()

                    else:
                        self.show_invalid_move_message()

    def is_valid_move(self, row, col, value):
        if value < 2 or value > 25:
            return False

        for dr in [-1, 0, 1]:
            for dc in [-1, 0, 1]:
                new_row, new_col = row + dr, col + dc
                if 0 <= new_row < GRID_SIZE and 0 <= new_col < GRID_SIZE and self.inner_board[new_row][new_col] == value - 1:
                    return True

        return False

    def update_display(self):
        screen = self.screen
        screen.fill(BLACK)

        for row in range(GRID_SIZE):
            for col in range(GRID_SIZE):
                x = col * GRID_WIDTH
                y = row * GRID_HEIGHT

                # Draw grid lines
                pygame.draw.rect(screen, WHITE, pygame.Rect(x, y, GRID_WIDTH, GRID_HEIGHT), 1)

                value = self.inner_board[row][col]
                if value > 0:
                    text = font.render(str(value), True, WHITE)
                    text_rect = text.get_rect(center=(x + GRID_WIDTH // 2, y + GRID_HEIGHT // 2))
                    screen.blit(text, text_rect)

        if self.paused:
            self.show_pause_message()

        pygame.display.flip()

    def show_pause_message(self):
        text = font.render("Click to Resume", True, WHITE)
        text_rect = text.get_rect(center=(WIDTH // 2, HEIGHT - 20))
        self.screen.blit(text, text_rect)

    def show_invalid_move_message(self):
        pygame.time.set_timer(pygame.USEREVENT, 2000)
        self.update_display()
        text = font.render("Invalid Move. Try Again", True, WHITE)
        text_rect = text.get_rect(center=(WIDTH // 2, HEIGHT - 20))
        self.screen.blit(text, text_rect)
        pygame.display.flip()

    def show_congratulatory_message(self):
        self.game_state = "congrats"
        pygame.time.set_timer(pygame.USEREVENT, 2000)
        self.update_display()
        text = font.render("Congratulations! Starting Level 2...", True, WHITE)
        text_rect = text.get_rect(center=(WIDTH // 2, HEIGHT - 20))
        self.screen.blit(text, text_rect)
        pygame.display.flip()

    def generate_level_2_board(self):
        self.outer_board = [[0 for _ in range(GRID_SIZE + 2)] for _ in range(GRID_SIZE + 2)]

        for i in range(GRID_SIZE):
            for j in range(GRID_SIZE):
                self.outer_board[i + 1][j + 1] = self.inner_board[i][j]

    def toggle_pause(self):
        if self.game_state == "playing":
            self.game_state = "paused"
        elif self.game_state == "paused":
            self.game_state = "playing"
        self.update_display()

# Main loop
game = NumberFillGame()
running = True

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.USEREVENT:
            pygame.time.set_timer(pygame.USEREVENT, 0)
        elif event.type == pygame.MOUSEBUTTONDOWN:
            x, y = event.pos
            col = x // GRID_WIDTH
            row = y // GRID_HEIGHT
            game.on_button_click(row, col)
        elif event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
            game.toggle_pause()

    game.update_display()

# Quit Pygame
pygame.quit()
sys.exit()

