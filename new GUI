import random
import tkinter as tk
from tkinter import messagebox
import json

# Create a 5x5 array filled with placeholders
array = [['-' for _ in range(5)] for _ in range(5)]
undo_stack = []

# Place '1' randomly in the array
def place_initial_number():
    random_row = random.randint(0, 4)
    random_col = random.randint(0, 4)
    array[random_row][random_col] = '1'
    undo_stack.append((random_row, random_col, '-'))

place_initial_number()

# Function to display the current state of the array in the GUI
def display_array_gui(array, label):
    text = '\n'.join([' '.join(str(cell) for cell in row) for row in array])
    label.config(text=text)

# Function to check if the row and column are adjacent to the predecessor of the number to be entered
def is_adjacent(row, col, predecessor):
    prev_row, prev_col, _ = predecessor
    return abs(row - prev_row) <= 1 and abs(col - prev_col) <= 1

# Function to handle user input
def handle_input(entry_widgets, label, current_num_label, root, undo_button):
    try:
        row = int(entry_widgets[0].get())
        col = int(entry_widgets[1].get())

        if 0 <= row < 5 and 0 <= col < 5:
            predecessor = undo_stack[-1]
            if array[row][col] == '-' and is_adjacent(row, col, predecessor):
                backup_array = [row[:] for row in array]  # Create a deep copy of the array for undo
                undo_stack.append((row, col, backup_array))

                array[row][col] = str(current_num_label.cget("text"))
                display_array_gui(array, label)
                if int(current_num_label.cget("text")) < 25:
                    current_num_label.config(text=str(int(current_num_label.cget("text")) + 1))
                    reset_entry(entry_widgets)
                else:
                    messagebox.showinfo("Congratulations", "You've completed the game!")
                    root.quit()
            else:
                messagebox.showinfo("Error", "Invalid spot. The cell must be adjacent to the predecessor of the number to be entered.")
        else:
            messagebox.showinfo("Error", "Invalid coordinates. Please enter row and column values between 0 and 4.")
    except ValueError:
        messagebox.showinfo("Error", "Invalid input. Please enter a number.")
    finally:
        update_undo_button(undo_button)

# Function to reset the entry fields after each move
def reset_entry(entry_widgets):
    for entry in entry_widgets:
        entry.delete(0, 'end')

# Function to handle the undo operation
def handle_undo(label, undo_button):
    if len(undo_stack) > 1:
        array = undo_stack[-1][2]
        undo_stack.pop()

        display_array_gui(array, label)
    update_undo_button(undo_button)

# Function to update the state of the undo button
def update_undo_button(undo_button):
    if len(undo_stack) > 1:
        undo_button.config(state="active")
    else:
        undo_button.config(state="disabled")

# Function to save the array to a JSON file
def save_array_to_json(array, filename):
    with open(filename, 'w') as file:
        json.dump(array, file)

# Create the GUI
root = tk.Tk()
root.title("Number Placement Game")

label = tk.Label(root, text="", font=("Courier", 20))
label.pack()

row_label = tk.Label(root, text="Row:")
row_label.pack()
row_entry = tk.Entry(root)
row_entry.pack()

col_label = tk.Label(root, text="Column:")
col_label.pack()
col_entry = tk.Entry(root)
col_entry.pack()

current_num_label = tk.Label(root, text="2")
current_num_label.pack()

submit_button = tk.Button(root, text="Submit", command=lambda: handle_input([row_entry, col_entry], label, current_num_label, root, undo_button))
submit_button.pack()

undo_button = tk.Button(root, text="Undo", state="disabled", command=lambda: handle_undo(label, undo_button))
undo_button.pack()

save_button = tk.Button(root, text="Save", command=lambda: save_array_to_json(array, 'saved_array.json'))
save_button.pack()

display_array_gui(array, label)

root.mainloop()
