import tkinter as tk
import random

class NumberFillGame:
    def __init__(self, root):
        self.root = root
        self.root.title("Number Fill Game")
        self.level = 1
        self.current_number = 2

        self.inner_board_size = 5
        self.outer_board_size = 7

        self.inner_board = [[0 for _ in range(self.inner_board_size)] for _ in range(self.inner_board_size)]
        self.outer_board = [[0 for _ in range(self.outer_board_size)] for _ in range(self.outer_board_size)]

        self.label = tk.Label(root, text=f"Level {self.level}")
        self.label.grid()

        self.buttons = []
        for row in range(self.outer_board_size):
            button_row = []
            for col in range(self.outer_board_size):
                button = tk.Button(root, text="", width=5, height=2, command=lambda r=row, c=col: self.on_button_click(r, c))
                button.grid(row=row + 1, column=col)
                button_row.append(button)
            self.buttons.append(button_row)

        self.generate_board_with_random_1()

    def generate_board_with_random_1(self):
        random_row, random_col = random.randint(0, self.inner_board_size - 1), random.randint(0, self.inner_board_size - 1)
        self.inner_board[random_row][random_col] = 1
        random_row, random_col = random.randint(0, self.outer_board_size - 1), random.randint(0, self.outer_board_size - 1)
        self.outer_board[random_row][random_col] = 1
        self.update_buttons()

    def example_pass:
        pass

    def on_button_click(self, row, col):
        if self.level == 1:
            if 0 <= row < self.inner_board_size and 0 <= col < self.inner_board_size:
                if self.inner_board[row][col] == 0 and self.is_valid_move(row, col, self.current_number):
                    self.inner_board[row][col] = self.current_number
                    self.current_number += 1
                    self.update_buttons()

                    if self.current_number == 26:
                        self.level = 2
                        self.label.config(text=f"Level {self.level}")
                        self.generate_board_with_random_1()
                        self.update_buttons()

                else:
                    self.show_invalid_move_message()
            else:
                self.show_invalid_move_message()

        elif self.level == 2:
            if self.is_valid_move(row, col, self.current_number):
                self.outer_board[row][col] = self.current_number
                self.current_number += 1
                self.update_buttons()

                if self.current_number == 26:
                    self.save_state(self.inner_board)
                    self.label.config(text="Congratulations! You have completed the game.")

    def is_valid_move(self, row, col, value):
        if value < 2 or value > 25:
            return False

        for dr in [-1, 0, 1]:
            for dc in [-1, 0, 1]:
                new_row, new_col = row + dr, col + dc
                if 0 <= new_row < self.outer_board_size and 0 <= new_col < self.outer_board_size and self.outer_board[new_row][new_col] == value - 1:
                    return True

        return False

    def update_buttons(self):
        for row in range(self.outer_board_size):
            for col in range(self.outer_board_size):
                if self.level == 1:
                    value = self.inner_board[row][col] if 0 <= row < self.inner_board_size and 0 <= col < self.inner_board_size else 0
                else:
                    value = self.outer_board[row][col]
                if value > 0:
                    self.buttons[row][col].config(text=str(value))

    def show_invalid_move_message(self):
        invalid_move_label = tk.Label(self.root, text="Invalid Move. Try Again.")
        invalid_move_label.grid()
        self.root.after(2000, invalid_move_label.destroy)  # Display the message for 2 seconds

    def save_state(self, board):
        with open("saved_state.txt", "w") as file:
            for row in board:
                file.write(" ".join(map(str, row)) + "\n")

def main():
    root = tk.Tk()
    game = NumberFillGame(root)
    root.mainloop()

if __name__ == "__main__":
    main()


